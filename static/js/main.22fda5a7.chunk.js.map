{"version":3,"sources":["components/ActionButton/ActionButton.tsx","components/ButtonGrid/ButtonGrid.tsx","components/Dice/Dice.tsx","components/GameHeader/GameHeader.tsx","components/ScoreButton/ScoreButton.tsx","util/getScores.ts","util/toCamelCase.ts","constants.ts","Game.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["ActionButton","children","onClick","css","ButtonGrid","Dice","GameHeader","totalScore","ScoreButton","id","score","name","longText","buttonProps","getNumberScore","diceScore","num","reduce","number","getOfKind","i","filter","dieScore","length","total","match","getConsecutive","sorted","slice","sort","consecutive","toCamelCase","string","converted","split","map","fragment","toUpperCase","join","toLowerCase","TEXT_START_GAME","CATEGORIES","upper","calculator","lower","matches","diceIds","nanoid","defaultDiceState","hold","Game","useState","actionButtonText","setActionButtonText","gameStarted","setGameStarted","roundStarted","setRoundStarted","roundComplete","rolls","setRolls","Map","useEffect","index","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.22fda5a7.chunk.js","sourcesContent":["/* @jsxImportSource @emotion/react */\nimport { jsx, css } from \"@emotion/react/macro\"; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport { ButtonHTMLAttributes } from \"react\";\n\nexport const ActionButton: React.FC<\n  ButtonHTMLAttributes<HTMLButtonElement>\n> = ({ children, onClick }) => (\n  <button\n    onClick={onClick}\n    css={css`\n      background: Crimson;\n      border: none;\n      border-radius: 0;\n      bottom: 0;\n      box-sizing: border-box;\n      color: white;\n      font-family: \"Rye\", cursive;\n      font-size: 1.5rem;\n      line-height: 1.5rem;\n      padding: 1rem;\n      position: fixed;\n      text-transform: uppercase;\n      width: 100%;\n      &:active {\n        background: Gold;\n        color: black;\n      }\n      &:focus {\n        outline: none;\n      }\n    `}\n  >\n    {children}\n  </button>\n);\n","import { HTMLAttributes } from \"react\";\n/* @jsxImportSource @emotion/react */\nimport { jsx, css } from \"@emotion/react/macro\"; // eslint-disable-line @typescript-eslint/no-unused-vars\n\nexport const ButtonGrid: React.FC<HTMLAttributes<HTMLDivElement>> = ({\n  children,\n}) => (\n  <div\n    css={css`\n      padding: 0.5rem;\n      position: relative;\n    `}\n  >\n    <div\n      css={css`\n        display: grid;\n        gap: 0.5rem 0.5rem;\n        grid-auto-flow: column;\n        grid-template-columns: repeat(2, calc(50% - 0.25rem));\n        grid-template-rows: repeat(7, 8vh);\n      `}\n    >\n      {children}\n    </div>\n  </div>\n);\n","/* @jsxImportSource @emotion/react */\nimport { jsx, css } from \"@emotion/react/macro\"; // eslint-disable-line @typescript-eslint/no-unused-vars\n\nexport const Dice = ({ children }: { children: React.ReactNode }) => (\n  <div\n    css={css`\n      padding: 0.5rem;\n      position: relative;\n    `}\n  >\n    <div\n      css={css`\n        display: grid;\n        gap: 0.5rem 0.5rem;\n        grid-auto-flow: column;\n        grid-template-columns: repeat(5, calc(20% - 0.4rem));\n        grid-template-rows: 100%;\n      `}\n    >\n      {children}\n    </div>\n  </div>\n);\n","/* @jsxImportSource @emotion/react */\nimport { jsx, css } from \"@emotion/react/macro\"; // eslint-disable-line @typescript-eslint/no-unused-vars\n\ninterface GameHeaderProps {\n  totalScore: number;\n}\n\nexport const GameHeader: React.FC<GameHeaderProps> = ({ totalScore }) => (\n  <header\n    css={css`\n      align-items: center;\n      background-color: Crimson;\n      box-shadow: 0 0.5vh 2vh rgba(0, 0, 0, 0.25);\n      color: white;\n      display: flex;\n      font-family: \"Lato\", sans-serif;\n      font-size: 1.25rem;\n      height: 1.5rem;\n      justify-content: space-between;\n      padding: 0.5rem;\n      position: fixed;\n      width: 100%;\n    `}\n  >\n    <span>Score: {totalScore}</span>\n  </header>\n);\n","import { HTMLAttributes } from \"react\";\n/* @jsxImportSource @emotion/react */\nimport { jsx, css } from \"@emotion/react/macro\"; // eslint-disable-line @typescript-eslint/no-unused-vars\n\ninterface ScoreButtonProps {\n  score?: number | null;\n  name?: string;\n  longText?: boolean;\n}\n\nexport const ScoreButton: React.FC<\n  ScoreButtonProps & HTMLAttributes<HTMLButtonElement>\n> = ({ id, score, name, longText, ...buttonProps }) => (\n  <button\n    css={css`\n      align-items: center;\n      background: transparent;\n      border: 0.5vw double white;\n      border-radius: 2vh;\n      box-sizing: border-box;\n      color: white;\n      display: flex;\n      font-family: \"Rye\", cursive;\n      justify-content: space-between;\n      text-align: left;\n      text-transform: uppercase;\n      padding: 0.5rem 0.5rem 0.5rem 1rem;\n      &:active {\n        background: Gold;\n        border-color: black;\n        color: black;\n      }\n      &:focus {\n        outline: none;\n      }\n    `}\n    {...buttonProps}\n  >\n    <span\n      css={css`\n        flex: 1;\n        font-size: ${longText ? \"2.25vh\" : \"3vh\"};\n        padding-right: 3vw;\n      `}\n    >\n      {name}\n    </span>\n    {score ? (\n      <span\n        css={css`\n          align-items: center;\n          background-color: Crimson;\n          border-radius: 1vh;\n          color: white;\n          display: flex;\n          font-size: 2.5vh;\n          justify-content: center;\n          height: 5vh;\n          width: 5vh;\n        `}\n      >\n        {score}\n      </span>\n    ) : null}\n  </button>\n);\n","import { DiceNumbers } from \"../types\";\n\nconst getNumberScore = (diceScore: DiceNumbers, num: number) =>\n  diceScore.reduce(\n    (score, number) => (number === num ? score + number : score + 0),\n    0\n  );\n\nconst getOfKind = (diceScore: DiceNumbers, num: number) => {\n  for (let i = 1; i <= 6; i++) {\n    const matches = diceScore.filter((dieScore) => dieScore === i);\n\n    if (matches.length >= num) {\n      return diceScore.reduce((total, match) => total + match);\n    }\n  }\n\n  return 0;\n};\n\nconst getConsecutive = (diceScore: DiceNumbers, num: number) => {\n  const sorted = diceScore.slice().sort();\n  let consecutive = 1;\n\n  for (let i = 1; i < 6; i++) {\n    if (sorted[i] === sorted[i - 1] + 1) {\n      consecutive = consecutive + 1;\n    }\n  }\n\n  return consecutive >= num ? (num - 1) * 10 : 0;\n};\n\nexport const getAces = (diceScore: DiceNumbers) => getNumberScore(diceScore, 1);\nexport const getTwos = (diceScore: DiceNumbers) => getNumberScore(diceScore, 2);\nexport const getThrees = (diceScore: DiceNumbers) =>\n  getNumberScore(diceScore, 3);\nexport const getFours = (diceScore: DiceNumbers) =>\n  getNumberScore(diceScore, 4);\nexport const getFives = (diceScore: DiceNumbers) =>\n  getNumberScore(diceScore, 5);\nexport const getSixes = (diceScore: DiceNumbers) =>\n  getNumberScore(diceScore, 6);\n\nexport const getThreeOfAKind = (diceScore: DiceNumbers) =>\n  getOfKind(diceScore, 3);\nexport const getFourOfAKind = (diceScore: DiceNumbers) =>\n  getOfKind(diceScore, 4);\nexport const getFullHouse = (diceScore: DiceNumbers) => {\n  const matches = [];\n\n  for (let i = 1; i <= 6; i++) {\n    matches[i] = diceScore.filter((dieScore) => dieScore === i);\n  }\n\n  return matches.filter((match) => match.length).length === 2 ? 25 : 0;\n};\nexport const getSmallStraight = (diceScore: DiceNumbers) =>\n  getConsecutive(diceScore, 4);\nexport const getLargeStraight = (diceScore: DiceNumbers) =>\n  getConsecutive(diceScore, 5);\nexport const getChance = (diceScore: DiceNumbers) =>\n  diceScore.reduce((total, dieScore) => total + dieScore);\nexport const getYahtzee = (diceScore: DiceNumbers) => {\n  for (let i = 1; i <= 6; i++) {\n    const matches = diceScore.filter((dieScore) => dieScore === i);\n\n    if (matches.length === 5) {\n      return 50;\n    }\n  }\n\n  return 0;\n};\n","export const toCamelCase = (string: string): string => {\n  const converted = string\n    .split(\" \")\n    .map((fragment) => fragment.slice(0, 1).toUpperCase() + fragment.slice(1))\n    .join(\"\");\n\n  return converted.slice(0, 1).toLowerCase() + converted.slice(1);\n};\n","import { DiceNumbers } from \"./types\";\nimport {\n  getAces,\n  getTwos,\n  getThrees,\n  getFours,\n  getFives,\n  getSixes,\n  getThreeOfAKind,\n  getFourOfAKind,\n  getFullHouse,\n  getSmallStraight,\n  getLargeStraight,\n  getChance,\n  getYahtzee,\n} from \"./util\";\n\nexport const ROLLS = 3;\nexport const TEXT_START_GAME = \"Start\";\nexport const TEXT_ROLL_DICE = \"Roll\";\nexport const TEXT_NEXT_ROUND = \"Next Round\";\nexport const CATEGORIES: {\n  upper: {\n    id: string;\n    name: string;\n    calculator?: (arg0: DiceNumbers) => number;\n    longText?: boolean;\n  }[];\n  lower: {\n    id: string;\n    name: string;\n    calculator?: (arg0: DiceNumbers) => number;\n    longText?: boolean;\n  }[];\n} = {\n  upper: [\n    { id: \"aces\", name: \"Aces\", calculator: getAces },\n    { id: \"twos\", name: \"Twos\", calculator: getTwos },\n    { id: \"threes\", name: \"Threes\", calculator: getThrees },\n    { id: \"fours\", name: \"Fours\", calculator: getFours },\n    { id: \"fives\", name: \"Fives\", calculator: getFives },\n    { id: \"sixes\", name: \"Sixes\", calculator: getSixes },\n    { id: \"upperBonus\", name: \"Bonus\" },\n  ],\n  lower: [\n    {\n      id: \"threeOfAKind\",\n      name: \"Three of a Kind\",\n      calculator: getThreeOfAKind,\n      longText: true,\n    },\n    {\n      id: \"fourOfAKind\",\n      name: \"Four of a Kind\",\n      calculator: getFourOfAKind,\n      longText: true,\n    },\n    {\n      id: \"fullHouse\",\n      name: \"Full House\",\n      calculator: getFullHouse,\n      longText: true,\n    },\n    {\n      id: \"smallStraight\",\n      name: \"Small Straight\",\n      calculator: getSmallStraight,\n      longText: true,\n    },\n    {\n      id: \"largeStraight\",\n      name: \"Large Straight\",\n      calculator: getLargeStraight,\n      longText: true,\n    },\n    { id: \"chance\", name: \"Chance\", calculator: getChance, longText: true },\n    { id: \"yahtzee\", name: \"Yahtzee\", calculator: getYahtzee, longText: true },\n  ],\n};\n\nexport const NUM_CATEGORIES = CATEGORIES.upper.length + CATEGORIES.lower.length;\n","import { useEffect, useState } from \"react\";\n/* @jsxImportSource @emotion/react */\nimport { jsx, css } from \"@emotion/react/macro\"; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport { nanoid } from \"nanoid\";\nimport {\n  ActionButton,\n  ButtonGrid,\n  Dice,\n  GameHeader,\n  ScoreButton,\n} from \"./components\";\nimport {\n  CATEGORIES,\n  ROLLS,\n  TEXT_NEXT_ROUND,\n  TEXT_ROLL_DICE,\n  TEXT_START_GAME,\n} from \"./constants\";\nimport { DiceNumbers, DiceState, Scores, ScoreCategory } from \"./types\";\nimport { toCamelCase } from \"./util\";\n\nconst diceIds = [nanoid(), nanoid(), nanoid(), nanoid(), nanoid()];\nconst defaultDiceState: DiceState = [\n  { id: diceIds[0], hold: false, score: 0 },\n  { id: diceIds[1], hold: false, score: 0 },\n  { id: diceIds[2], hold: false, score: 0 },\n  { id: diceIds[3], hold: false, score: 0 },\n  { id: diceIds[4], hold: false, score: 0 },\n];\n\nconst Game = () => {\n  const [actionButtonText, setActionButtonText] = useState<string>(\n    TEXT_START_GAME\n  );\n  const [gameStarted, setGameStarted] = useState<boolean>(false);\n  const [roundStarted, setRoundStarted] = useState<boolean>(false);\n  const [roundComplete, setRoundComplete] = useState<boolean>(false);\n  const [diceState, setDiceState] = useState<DiceState>(defaultDiceState);\n  const [rolls, setRolls] = useState<number>(0);\n  const [turn, setTurn] = useState<number>(0);\n  const [scored, setScored] = useState<boolean>(false);\n  const [scores, setScores] = useState<Scores>(new Map());\n  const [totalScore, setTotalScore] = useState<number>(0);\n\n  const updateActionButton = () => {\n    if (gameStarted) {\n      if (roundComplete) {\n        setActionButtonText(TEXT_NEXT_ROUND);\n        return;\n      }\n\n      setActionButtonText(`${TEXT_ROLL_DICE} (${rolls})`);\n      return;\n    }\n\n    setActionButtonText(TEXT_START_GAME);\n  };\n\n  useEffect(updateActionButton, [\n    gameStarted,\n    rolls,\n    roundComplete,\n    roundStarted,\n  ]);\n\n  const handleClick = () => {\n    if (!gameStarted) {\n      setGameStarted(true);\n      setRolls(ROLLS);\n    }\n\n    if (!roundStarted) {\n      setRoundStarted(true);\n    }\n  };\n\n  const getScoreButtons = () =>\n    [...CATEGORIES.upper, ...CATEGORIES.lower].map(\n      ({ id, name, calculator, longText }, index) => (\n        <ScoreButton\n          key={toCamelCase(name)}\n          id={toCamelCase(name)}\n          name={name}\n          score={30}\n          longText={longText}\n        >\n          {name}\n        </ScoreButton>\n      )\n    );\n\n  return (\n    <div>\n      <div\n        css={css`\n          background-color: SeaGreen;\n          color: white;\n          display: flex;\n          font-family: \"Lato\", sans-serif;\n          height: calc(100vh - 3.5rem);\n          width: 100%;\n        `}\n      >\n        {gameStarted ? (\n          <>\n            <GameHeader totalScore={totalScore} />\n            <div\n              css={css`\n                display: flex;\n                flex-direction: column;\n                height: calc(100vh - 48px);\n                padding-top: 48px;\n                max-width: 640px;\n                margin: 0 auto;\n              `}\n            >\n              <ButtonGrid>{getScoreButtons()}</ButtonGrid>\n              <Dice>Dice</Dice>\n            </div>\n          </>\n        ) : (\n          <h1\n            css={css`\n              align-self: center;\n              margin: 0 auto;\n            `}\n          >\n            React Yahtzee\n          </h1>\n        )}\n      </div>\n      <ActionButton onClick={handleClick}>{actionButtonText}</ActionButton>\n    </div>\n  );\n};\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/serviceWorker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Game from \"./Game\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}