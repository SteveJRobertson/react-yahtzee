[{"/Users/steverobertson/Projects/react-yahtzee/src/index.tsx":"1","/Users/steverobertson/Projects/react-yahtzee/src/reportWebVitals.ts":"2","/Users/steverobertson/Projects/react-yahtzee/src/serviceWorkerRegistration.ts":"3","/Users/steverobertson/Projects/react-yahtzee/src/Game.tsx":"4","/Users/steverobertson/Projects/react-yahtzee/src/constants.ts":"5","/Users/steverobertson/Projects/react-yahtzee/src/components/index.ts":"6","/Users/steverobertson/Projects/react-yahtzee/src/util/index.ts":"7","/Users/steverobertson/Projects/react-yahtzee/src/util/getRandomNumber.ts":"8","/Users/steverobertson/Projects/react-yahtzee/src/util/getScores.ts":"9","/Users/steverobertson/Projects/react-yahtzee/src/util/toCamelCase.ts":"10","/Users/steverobertson/Projects/react-yahtzee/src/components/Dice/index.ts":"11","/Users/steverobertson/Projects/react-yahtzee/src/components/ActionButton/index.ts":"12","/Users/steverobertson/Projects/react-yahtzee/src/components/ButtonGrid/index.ts":"13","/Users/steverobertson/Projects/react-yahtzee/src/components/GameHeader/index.ts":"14","/Users/steverobertson/Projects/react-yahtzee/src/components/ScoreButton/index.ts":"15","/Users/steverobertson/Projects/react-yahtzee/src/components/Dice/Dice.tsx":"16","/Users/steverobertson/Projects/react-yahtzee/src/components/ScoreButton/ScoreButton.tsx":"17","/Users/steverobertson/Projects/react-yahtzee/src/components/ActionButton/ActionButton.tsx":"18","/Users/steverobertson/Projects/react-yahtzee/src/components/ButtonGrid/ButtonGrid.tsx":"19","/Users/steverobertson/Projects/react-yahtzee/src/components/GameHeader/GameHeader.tsx":"20","/Users/steverobertson/Projects/react-yahtzee/src/components/Die/index.ts":"21","/Users/steverobertson/Projects/react-yahtzee/src/components/Die/Die.tsx":"22","/Users/steverobertson/Projects/react-yahtzee/src/GameProvider.tsx":"23","/Users/steverobertson/Projects/react-yahtzee/src/gameReducer.ts":"24","/Users/steverobertson/Projects/react-yahtzee/src/GameCtx.ts":"25"},{"size":911,"mtime":1608381424739,"results":"26","hashOfConfig":"27"},{"size":425,"mtime":1607705929385,"results":"28","hashOfConfig":"27"},{"size":5283,"mtime":1607705929386,"results":"29","hashOfConfig":"27"},{"size":9195,"mtime":1608381715314,"results":"30","hashOfConfig":"27"},{"size":3161,"mtime":1608381691657,"results":"31","hashOfConfig":"27"},{"size":147,"mtime":1607705929384,"results":"32","hashOfConfig":"27"},{"size":95,"mtime":1607705929389,"results":"33","hashOfConfig":"27"},{"size":114,"mtime":1607705929388,"results":"34","hashOfConfig":"27"},{"size":2263,"mtime":1607705929389,"results":"35","hashOfConfig":"27"},{"size":265,"mtime":1607705929391,"results":"36","hashOfConfig":"27"},{"size":24,"mtime":1607705929379,"results":"37","hashOfConfig":"27"},{"size":32,"mtime":1607705929376,"results":"38","hashOfConfig":"27"},{"size":30,"mtime":1607705929378,"results":"39","hashOfConfig":"27"},{"size":30,"mtime":1607705929382,"results":"40","hashOfConfig":"27"},{"size":31,"mtime":1607705929384,"results":"41","hashOfConfig":"27"},{"size":1521,"mtime":1608381715364,"results":"42","hashOfConfig":"27"},{"size":1650,"mtime":1608381715314,"results":"43","hashOfConfig":"27"},{"size":837,"mtime":1608312976319,"results":"44","hashOfConfig":"27"},{"size":627,"mtime":1607705929376,"results":"45","hashOfConfig":"27"},{"size":1458,"mtime":1608381424737,"results":"46","hashOfConfig":"27"},{"size":23,"mtime":1607705929380,"results":"47","hashOfConfig":"27"},{"size":7103,"mtime":1608381715362,"results":"48","hashOfConfig":"27"},{"size":3028,"mtime":1608381715314,"results":"49","hashOfConfig":"27"},{"size":3713,"mtime":1608381715314,"results":"50","hashOfConfig":"27"},{"size":647,"mtime":1608381481667,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1nwacb8",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"/Users/steverobertson/Projects/react-yahtzee/src/index.tsx",[],"/Users/steverobertson/Projects/react-yahtzee/src/reportWebVitals.ts",[],"/Users/steverobertson/Projects/react-yahtzee/src/serviceWorkerRegistration.ts",[],"/Users/steverobertson/Projects/react-yahtzee/src/Game.tsx",["104"],"import {\n  /* useEffect, useReducer,  */ useEffect,\n  /* , useState */\n} from 'react'\n/* @jsxImportSource @emotion/react */\nimport { jsx, css } from '@emotion/react/macro' // eslint-disable-line @typescript-eslint/no-unused-vars\nimport {\n  ActionButton,\n  ButtonGrid,\n  Dice,\n  GameHeader,\n  ScoreButton,\n} from './components'\nimport {\n  CATEGORIES,\n  // ROLLS,\n  // MAX,\n  // MIN,\n  // NUM_CATEGORIES,\n  TEXT_NEXT_ROUND,\n  TEXT_ROLL_DICE,\n  TEXT_START_GAME,\n  TEXT_NEW_GAME,\n  // UPPER_BONUS,\n  // UPPER_BONUS_SCORE,\n} from './constants'\nimport { ScoreCategory } from './types'\nimport { /* getRandomNumber,  */ toCamelCase } from './util'\n// import { GameCtx } from \"./GameCtx\";\n// import { gameReducer } from \"./gameReducer\";\nimport { useGame } from './GameProvider'\n\nexport const Game = () => {\n  const {\n    state,\n    startGame,\n    rollDice,\n    stopRolling,\n    selectScore,\n    deselectScore,\n    nextRound,\n  } = useGame()\n\n  useEffect(() => {\n    console.log(state)\n  }, [state])\n\n  useEffect(() => {\n    if (state.rolling) {\n      setTimeout(() => {\n        stopRolling()\n      }, 2000)\n    }\n  }, [state.rolling, stopRolling])\n\n  // const [state, dispatch] = useReducer(gameReducer, initialState);\n\n  // const [actionButtonText, setActionButtonText] = useState<string>(\n  //   TEXT_START_GAME\n  // );\n  // const [gameStarted, setGameStarted] = useState<boolean>(false);\n  // const [roundStarted, setRoundStarted] = useState<boolean>(false);\n  // const [rolling, setRolling] = useState<boolean>(false);\n  // const [roundScores, setRoundScores] = useState<Scores>(new Map());\n  // const [roundComplete, setRoundComplete] = useState<boolean>(false);\n  // const [diceState, setDiceState] = useState<DiceState>(defaultDiceState);\n  // const [rolls, setRolls] = useState<number>(0);\n  // const [turn, setTurn] = useState<number>(0);\n  // const [scored, setScored] = useState<boolean>(false);\n  // const [scores, setScores] = useState<Scores[]>();\n  // const [round, setRound] = useState<number>(0);\n  // const [totalUpperScore, setTotalUpperScore] = useState<number>(0);\n  // const [totalLowerScore, setTotalLowerScore] = useState<number>(0);\n  // const [totalScore, setTotalScore] = useState<number>(0);\n  // const [upperScoreBonus, setUpperScoreBonus] = useState<number>(0);\n\n  // useEffect(() => {\n  //   console.log(\"Round\", round);\n  //   console.log(\"Scores\", scores);\n\n  //   if (!round || !scores) return;\n  //   if (!scores[round - 1]) return;\n\n  //   const upperScore = CATEGORIES.upper\n  //     .map((category) => category.id)\n  //     .map((id) =>\n  //       scores\n  //         ? scores[round - 1].get((id as unknown) as ScoreCategory) || 0\n  //         : 0\n  //     )\n  //     .reduce((total, score) => total + score);\n  //   const lowerScore = CATEGORIES.lower\n  //     .map((category) => category.id)\n  //     .map((id) =>\n  //       scores\n  //         ? scores[round - 1].get((id as unknown) as ScoreCategory) || 0\n  //         : 0\n  //     )\n  //     .reduce((total, score) => total + score);\n\n  //   console.log(upperScore, lowerScore);\n\n  //   setTotalUpperScore(upperScore);\n  //   // setTotalLowerScore(lowerScore);\n  //   setUpperScoreBonus(upperScore >= UPPER_BONUS_SCORE ? UPPER_BONUS : 0);\n  //   setTotalScore(upperScore + lowerScore + upperScoreBonus);\n  // }, [round, scores, upperScoreBonus]);\n\n  // useEffect(() => {\n  //   if (totalUpperScore >= UPPER_BONUS_SCORE) setUpperScoreBonus(UPPER_BONUS);\n\n  //   // setTotalScore(totalUpperScore + totalLowerScore + upperScoreBonus);\n  // }, [totalUpperScore]);\n\n  // useEffect(() => {\n  //   if (round && scores) {\n  //     setRoundScores(scores[round - 1]);\n  //   }\n  // }, [round, scores]);\n\n  // const updateActionButton = () => {\n  //   if (gameStarted) {\n  //     if (roundComplete) {\n  //       setActionButtonText(TEXT_NEXT_ROUND);\n  //       return;\n  //     }\n\n  //     setActionButtonText(`${TEXT_ROLL_DICE} (${rolls})`);\n  //     return;\n  //   }\n\n  //   setActionButtonText(TEXT_START_GAME);\n  // };\n\n  // useEffect(updateActionButton, [\n  //   gameStarted,\n  //   rolls,\n  //   roundComplete,\n  //   roundStarted,\n  // ]);\n\n  // const nextTurn = () => {\n  //   setRoundStarted(false);\n  //   setTurn(turn + 1);\n  //   setRolls(ROLLS);\n  //   setScored(false);\n  //   setDiceState(\n  //     diceState.map((dieState) => ({\n  //       ...dieState,\n  //       hold: false,\n  //     })) as DiceState\n  //   );\n  // };\n\n  // const handleClick = () => {\n  //   if (!gameStarted) {\n  //     startGame();\n  //     setGameStarted(true);\n  //     setRolls(ROLLS);\n  //   }\n\n  //   if (!roundStarted) {\n  //     setRoundStarted(true);\n  //     setRound(round + 1);\n  //     setTurn(1);\n  //     return;\n  //   }\n\n  //   // Roll the dice\n  //   setRolling(true);\n  //   setDiceState(\n  //     diceState.map((dieState) => {\n  //       const { hold, score } = dieState;\n\n  //       if (hold) return dieState;\n\n  //       let rand: number;\n\n  //       do {\n  //         rand = getRandomNumber(MAX, MIN);\n\n  //         if (score === 0) break;\n  //       } while (rand === score);\n\n  //       return {\n  //         ...dieState,\n  //         score: rand,\n  //       };\n  //     }) as DiceState\n  //   );\n  //   setRolls(rolls - 1);\n  // };\n\n  // const handleHold = (dieId: string) => {\n  //   const dieStateToUpdate = diceState.find(({ id }) => id === dieId);\n  //   if (!dieStateToUpdate) return;\n\n  //   const updatedDiceState = diceState.map((dieState) => {\n  //     if (dieState.id !== dieId) return dieState;\n\n  //     return {\n  //       ...dieState,\n  //       hold: !dieState.hold,\n  //     };\n  //   }) as DiceState;\n\n  //   if (!updatedDiceState) return;\n  //   setDiceState(updatedDiceState);\n  // };\n\n  // const diceScores = diceState\n  //   ? (diceState.map((dieState) => dieState.score) as DiceNumbers)\n  //   : ([0, 0, 0, 0, 0] as DiceNumbers);\n\n  // const updateScores = (roundScores: Map<ScoreCategory, number | null>) => {\n  //   console.log(\"roundScores\", roundScores);\n  //   const newScores = scores ? [...scores] : [];\n  //   newScores[round - 1] = roundScores;\n  //   setScores(newScores);\n\n  //   if (roundScores.size === NUM_CATEGORIES) {\n  //     setRoundComplete(true);\n  //   }\n  // };\n\n  // const handleScored = () => {\n  //   // setRolls(0);\n  //   // setScored(true);\n  //   nextTurn();\n  // };\n\n  const getScoreButtons = () =>\n    [...CATEGORIES.upper, ...CATEGORIES.lower].map(\n      ({ name, calculator, longText }) => {\n        const key = (toCamelCase(name) as unknown) as ScoreCategory\n        const disabled =\n          state.scoreButtonsDisabled ||\n          ((!state.selectedScore && state.scores.get(key)) as boolean)\n\n        return (\n          <ScoreButton\n            css={css`\n              visibility: ${key === (('bonus' as unknown) as ScoreCategory)\n                ? 'hidden'\n                : 'visible'};\n            `}\n            key={toCamelCase(name)}\n            id={toCamelCase(name)}\n            name={name}\n            score={\n              Number.isInteger(state.scores.get(key))\n                ? state.scores.get(key)\n                : null\n            }\n            longText={longText}\n            disabled={disabled}\n            onClick={() =>\n              state.scores.has(key)\n                ? deselectScore(key)\n                : selectScore(key, calculator)\n            }\n          >\n            {name}\n          </ScoreButton>\n        )\n      }\n    )\n\n  return (\n    <div\n      css={css`\n        background-color: SeaGreen;\n        color: white;\n        display: flex;\n        font-family: 'Lato', sans-serif;\n        height: calc(100vh - 3.5rem);\n        width: 100%;\n      `}\n    >\n      {state?.displayGame ? (\n        <>\n          <GameHeader />\n          <div\n            css={css`\n              display: flex;\n              flex-direction: column;\n              height: calc(100vh - 48px);\n              padding-top: 48px;\n              max-width: 640px;\n              margin: 0 auto;\n            `}\n          >\n            <ButtonGrid>{getScoreButtons()}</ButtonGrid>\n            <Dice />\n          </div>\n          {state.rollsRemaining === 0 || state.selectedScore ? (\n            state.roundsRemaining === 0 ? (\n              <ActionButton\n                disabled={state.rollButtonDisabled}\n                onClick={startGame}\n              >\n                {TEXT_NEW_GAME}\n              </ActionButton>\n            ) : (\n              <ActionButton\n                disabled={state.rollButtonDisabled}\n                onClick={nextRound}\n              >\n                {TEXT_NEXT_ROUND}\n              </ActionButton>\n            )\n          ) : (\n            <ActionButton\n              disabled={state.rollButtonDisabled}\n              onClick={rollDice}\n            >\n              {TEXT_ROLL_DICE}{' '}\n              {state.rollsRemaining && `(${state.rollsRemaining})`}\n            </ActionButton>\n          )}\n        </>\n      ) : (\n        <>\n          <h1\n            css={css`\n              align-self: center;\n              margin: 0 auto;\n            `}\n          >\n            React Yahtzee\n          </h1>\n          <ActionButton onClick={startGame}>{TEXT_START_GAME}</ActionButton>\n        </>\n      )}\n    </div>\n  )\n}\n",["105","106"],"/Users/steverobertson/Projects/react-yahtzee/src/constants.ts",[],"/Users/steverobertson/Projects/react-yahtzee/src/components/index.ts",[],"/Users/steverobertson/Projects/react-yahtzee/src/util/index.ts",[],"/Users/steverobertson/Projects/react-yahtzee/src/util/getRandomNumber.ts",[],"/Users/steverobertson/Projects/react-yahtzee/src/util/getScores.ts",[],"/Users/steverobertson/Projects/react-yahtzee/src/util/toCamelCase.ts",[],"/Users/steverobertson/Projects/react-yahtzee/src/components/Dice/index.ts",[],"/Users/steverobertson/Projects/react-yahtzee/src/components/ActionButton/index.ts",[],"/Users/steverobertson/Projects/react-yahtzee/src/components/ButtonGrid/index.ts",[],"/Users/steverobertson/Projects/react-yahtzee/src/components/GameHeader/index.ts",[],"/Users/steverobertson/Projects/react-yahtzee/src/components/ScoreButton/index.ts",[],"/Users/steverobertson/Projects/react-yahtzee/src/components/Dice/Dice.tsx",[],"/Users/steverobertson/Projects/react-yahtzee/src/components/ScoreButton/ScoreButton.tsx",[],"/Users/steverobertson/Projects/react-yahtzee/src/components/ActionButton/ActionButton.tsx",[],"/Users/steverobertson/Projects/react-yahtzee/src/components/ButtonGrid/ButtonGrid.tsx",[],"/Users/steverobertson/Projects/react-yahtzee/src/components/GameHeader/GameHeader.tsx",[],"/Users/steverobertson/Projects/react-yahtzee/src/components/Die/index.ts",[],"/Users/steverobertson/Projects/react-yahtzee/src/components/Die/Die.tsx",[],"/Users/steverobertson/Projects/react-yahtzee/src/GameProvider.tsx",[],"/Users/steverobertson/Projects/react-yahtzee/src/gameReducer.ts",[],"/Users/steverobertson/Projects/react-yahtzee/src/GameCtx.ts",[],{"ruleId":null,"fatal":true,"severity":2,"message":"107","line":235,"column":0},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},"Parsing error: Merge conflict marker encountered.","no-native-reassign",["112"],"no-negated-in-lhs",["113"],"no-global-assign","no-unsafe-negation"]